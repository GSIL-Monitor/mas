<?xml version="1.0" encoding="UTF-8"?>
<Configuration status="warn">
    <contextName>Logback for letv-mas-caller</contextName>
    <springProperty scope="context" name="logPath" source="logout.path" defaultValue="/letv/logs/mas/caller/tvproxy-user"/>
    <springProperty scope="context" name="logLevel" source="logout.level" defaultValue="DEBUG"/>
    <springProperty scope="context" name="logCapacity" source="logout.capacity" defaultValue="30GB"/>

    <!--输出到控制台 ConsoleAppender-->
    <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
        <!--展示格式 layout-->
        <encoder>
            <charset>UTF-8</charset>
            <pattern>%d{yyyy-MM-dd HH:mm:ss} [%thread] %level [%class:%line] %logger - %m%n</pattern>
        </encoder>
    </appender>

    <appender name="SERVER-API" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--如果只是想要 Info 级别的日志，只是过滤 info 还是会输出 Error 日志，因为 Error 的级别高，
            所以我们使用下面的策略，可以避免输出 Error 的日志-->
        <!--<filter class="ch.qos.logback.classic.filter.LevelFilter">
            &lt;!&ndash;过滤 Error&ndash;&gt;
            <level>ERROR</level>
            &lt;!&ndash;匹配到就禁止&ndash;&gt;
            <onMatch>DENY</onMatch>
            &lt;!&ndash;没有匹配到就允许&ndash;&gt;
            <onMismatch>ACCEPT</onMismatch>
        </filter>-->
        <File>${logPath}/server-api.log</File>
        <!--滚动策略，按照时间滚动 TimeBasedRollingPolicy
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            &lt;!&ndash;文件路径,定义了日志的切分方式——把每一天的日志归档到一个文件中,以防止日志填满整个磁盘空间&ndash;&gt;
            <FileNamePattern>/letv/logs/mas/caller/tvproxy-user/server-api.%d{yyyy-MM-dd}.%i.log.gz</FileNamePattern>
            &lt;!&ndash; 单个日志文件最多 100MB &ndash;&gt;
            <maxFileSize>100MB</maxFileSize>
            &lt;!&ndash;只保留最近30天的日志&ndash;&gt;
            <maxHistory>30</maxHistory>
            &lt;!&ndash;用来指定日志文件的上限大小，那么到了这个值，就会删除旧的日志&ndash;&gt;
            &lt;!&ndash;<totalSizeCap>1GB</totalSizeCap>&ndash;&gt;
        </rollingPolicy>-->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <FileNamePattern>${logPath}/server-api.log.%d{yyyy-MM-dd}.gz</FileNamePattern>
            <!--日志文件保留天数 -->
            <MaxHistory>7</MaxHistory>
            <!-- 日志总保存量大小 -->
            <!--<totalSizeCap>2GB</totalSizeCap>-->
        </rollingPolicy>
        <!--日志输出编码格式化-->
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <charset>UTF-8</charset>
            <immediateFlush>false</immediateFlush>
            <!--<pattern>%d [%t] %-5level %logger{36}.%M\(%file:%line\) - %msg%n</pattern>-->
            <pattern>%d{yyyy-MM-dd HH:mm:ss} [%thread] %level [%class:%line] %logger - %m%n</pattern>
        </encoder>
    </appender>
    <appender name="SERVER-API_ASYNC" class="ch.qos.logback.classic.AsyncAppender" queueSize="1000000" discardingThreshold="0" includeCallerData="false">
        <appender-ref ref="SERVER-API" />
    </appender>

    <appender name="errorLog" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--如果只是想要 Error 级别的日志，那么需要过滤一下，默认是 info 级别的，ThresholdFilter-->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>ERROR</level>
        </filter>
        <!--日志名称，如果没有File 属性，那么只会使用FileNamePattern的文件路径规则
            如果同时有<File>和<FileNamePattern>，那么当天日志是<File>，明天会自动把今天
            的日志改名为今天的日期。即，<File> 的日志都是当天的。
        -->
        <File>${logPath}/error.log</File>
        <!--滚动策略，按照时间滚动 TimeBasedRollingPolicy-->
        <!--<rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            &lt;!&ndash;文件路径,定义了日志的切分方式——把每一天的日志归档到一个文件中,以防止日志填满整个磁盘空间&ndash;&gt;
            <FileNamePattern>${logback.logDir}/error.%d{yyyy-MM-dd}.%i.log.gz</FileNamePattern>
            &lt;!&ndash; 单个日志文件最多 100MB &ndash;&gt;
            <maxFileSize>100MB</maxFileSize>
            &lt;!&ndash;只保留最近30天的日志&ndash;&gt;
            <maxHistory>30</maxHistory>
            &lt;!&ndash;用来指定日志文件的上限大小，那么到了这个值，就会删除旧的日志&ndash;&gt;
            &lt;!&ndash;<totalSizeCap>1GB</totalSizeCap>&ndash;&gt;
        </rollingPolicy>-->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <FileNamePattern>${logPath}/error.log.%d{yyyy-MM-dd}.gz</FileNamePattern>
            <!--日志文件保留天数 -->
            <MaxHistory>7</MaxHistory>
            <!-- 日志总保存量大小 -->
            <!--<totalSizeCap>2GB</totalSizeCap>-->
        </rollingPolicy>
        <!--日志输出码格式化-->
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <charset>UTF-8</charset>
            <immediateFlush>false</immediateFlush>
            <!--<pattern>%d [%t] %-5level %logger{36}.%M\(%file:%line\) - %msg%n</pattern>-->
            <pattern>%d{yyyy-MM-dd HH:mm:ss} [%thread] %level [%class:%line] %logger - %m%n</pattern>
        </encoder>
    </appender>
    <appender name="errorLog_ASYNC" class="ch.qos.logback.classic.AsyncAppender" queueSize="1000000" discardingThreshold="0" includeCallerData="false">
        <appender-ref ref="errorLog" />
    </appender>
    <appender name="CALLER_ROLLING_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${logPath}/host-access.log</file>
        <!--滚动策略，按照时间滚动 TimeBasedRollingPolicy-->
        <!--<rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">-->
            <!--&lt;!&ndash;文件路径,定义了日志的切分方式——把每一天的日志归档到一个文件中,以防止日志填满整个磁盘空间&ndash;&gt;-->
            <!--<FileNamePattern>${logPath}/iptv-access.log.%d{yyyy-MM-dd}.%i.zip</FileNamePattern>-->
            <!--&lt;!&ndash; 单个日志文件最多 100MB &ndash;&gt;-->
            <!--<maxFileSize>100MB</maxFileSize>-->
            <!--&lt;!&ndash;只保留最近7天的日志&ndash;&gt;-->
            <!--<maxHistory>7</maxHistory>-->
            <!--&lt;!&ndash;用来指定日志文件的上限大小，那么到了这个值，就会删除旧的日志&ndash;&gt;-->
            <!--&lt;!&ndash;<totalSizeCap>1GB</totalSizeCap>&ndash;&gt;-->
        <!--</rollingPolicy>-->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <FileNamePattern>${logPath}/host-access.log.%d{yyyy-MM-dd}.gz</FileNamePattern>
            <!--日志文件保留天数 -->
            <MaxHistory>7</MaxHistory>
            <!-- 日志总保存量大小 -->
            <!--<totalSizeCap>${logCapacity}</totalSizeCap>-->
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
        <!--日志输出编码格式化-->
        <!--<encoder>-->
            <charset>UTF-8</charset>
            <!-- 立即IO输出，关闭走流缓存8K -->
            <immediateFlush>false</immediateFlush>
            <pattern>%m%n</pattern>
        </encoder>
        <!-- 追加方式记录日志 -->
        <append>true</append>
    </appender>
    <appender name="CALLER_ROLLING_FILE_ASYNC" class="ch.qos.logback.classic.AsyncAppender" queueSize="1000000" discardingThreshold="0" includeCallerData="false">
        <appender-ref ref="CALLER_ROLLING_FILE" />
    </appender>

    <appender name="CACHE_ROLLING_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${logPath}/cacheData.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <FileNamePattern>${logPath}/cacheData.log.%d{yyyy-MM-dd}.gz</FileNamePattern>
            <!--日志文件保留天数 -->
            <MaxHistory>7</MaxHistory>
            <!-- 日志总保存量大小 -->
            <!--<totalSizeCap>${logCapacity}</totalSizeCap>-->
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <!--日志输出编码格式化-->
            <!--<encoder>-->
            <charset>UTF-8</charset>
            <!-- 立即IO输出，关闭走流缓存8K -->
            <immediateFlush>false</immediateFlush>
            <pattern>%d{yyyy-MM-dd HH:mm:ss} - %m%n</pattern>
        </encoder>
        <!-- 追加方式记录日志 -->
        <append>true</append>
    </appender>
    <appender name="CACHE_ROLLING_FILE_ASYNC" class="ch.qos.logback.classic.AsyncAppender" queueSize="1000000" discardingThreshold="0" includeCallerData="false">
        <appender-ref ref="CACHE_ROLLING_FILE" />
    </appender>
    <appender name="HTTP_ROLLING_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${logPath}/httpClient.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <FileNamePattern>${logPath}/httpClient.log.%d{yyyy-MM-dd}.gz</FileNamePattern>
            <!--日志文件保留天数 -->
            <MaxHistory>7</MaxHistory>
            <!-- 日志总保存量大小 -->
            <!--<totalSizeCap>${logCapacity}</totalSizeCap>-->
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <!--日志输出编码格式化-->
            <!--<encoder>-->
            <charset>UTF-8</charset>
            <!-- 立即IO输出，关闭走流缓存8K -->
            <immediateFlush>false</immediateFlush>
            <pattern>%d{yyyy-MM-dd HH:mm:ss} - %m%n</pattern>
        </encoder>
        <!-- 追加方式记录日志 -->
        <append>true</append>
    </appender>
    <appender name="HTTP_ROLLING_FILE_ASYNC" class="ch.qos.logback.classic.AsyncAppender" queueSize="1000000" discardingThreshold="0" includeCallerData="false">
        <appender-ref ref="HTTP_ROLLING_FILE" />
    </appender>
    <appender name="SERVICE_STATUS_ROLLING_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${logPath}/serviceStatus.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <FileNamePattern>${logPath}/serviceStatus.log.%d{yyyy-MM-dd}.gz</FileNamePattern>
            <!--日志文件保留天数 -->
            <MaxHistory>7</MaxHistory>
            <!-- 日志总保存量大小 -->
            <!--<totalSizeCap>${logCapacity}</totalSizeCap>-->
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <!--日志输出编码格式化-->
            <!--<encoder>-->
            <charset>UTF-8</charset>
            <!-- 立即IO输出，关闭走流缓存8K -->
            <immediateFlush>false</immediateFlush>
            <pattern>%d{yyyy-MM-dd HH:mm:ss} - %m%n</pattern>
        </encoder>
        <!-- 追加方式记录日志 -->
        <append>true</append>
    </appender>
    <appender name="SERVICE_STATUS_ROLLING_FILE_ASYNC" class="ch.qos.logback.classic.AsyncAppender" queueSize="1000000" discardingThreshold="0" includeCallerData="false">
        <appender-ref ref="SERVICE_STATUS_ROLLING_FILE" />
    </appender>
    <appender name="API_SWITCH_MONITOR_STATUS_ROLLING_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${logPath}/apiSwitchMonitor.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <FileNamePattern>${logPath}/apiSwitchMonitor.log.%d{yyyy-MM-dd}.gz</FileNamePattern>
            <!--日志文件保留天数 -->
            <MaxHistory>7</MaxHistory>
            <!-- 日志总保存量大小 -->
            <!--<totalSizeCap>${logCapacity}</totalSizeCap>-->
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <!--日志输出编码格式化-->
            <!--<encoder>-->
            <charset>UTF-8</charset>
            <!-- 立即IO输出，关闭走流缓存8K -->
            <immediateFlush>false</immediateFlush>
            <pattern>%d{yyyy-MM-dd HH:mm:ss} - %m%n</pattern>
        </encoder>
        <!-- 追加方式记录日志 -->
        <append>true</append>
    </appender>
    <appender name="API_SWITCH_MONITOR_STATUS_ROLLING_FILE_ASYNC" class="ch.qos.logback.classic.AsyncAppender" queueSize="1000000" discardingThreshold="0" includeCallerData="false">
        <appender-ref ref="API_SWITCH_MONITOR_STATUS_ROLLING_FILE" />
    </appender>
    <appender name="HYSTRIX_ROLLING_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${logPath}/hystrixMonitor.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <FileNamePattern>${logPath}/hystrixMonitor.log.%d{yyyy-MM-dd}.gz</FileNamePattern>
            <!--日志文件保留天数 -->
            <MaxHistory>7</MaxHistory>
            <!-- 日志总保存量大小 -->
            <!--<totalSizeCap>${logCapacity}</totalSizeCap>-->
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <!--日志输出编码格式化-->
            <!--<encoder>-->
            <charset>UTF-8</charset>
            <!-- 立即IO输出，关闭走流缓存8K -->
            <immediateFlush>false</immediateFlush>
            <pattern>%d{yyyy-MM-dd HH:mm:ss} - %m%n</pattern>
        </encoder>
        <!-- 追加方式记录日志 -->
        <append>true</append>
    </appender>
    <appender name="HYSTRIX_ROLLING_FILE_ASYNC" class="ch.qos.logback.classic.AsyncAppender" queueSize="1000000" discardingThreshold="0" includeCallerData="false">
        <appender-ref ref="HYSTRIX_ROLLING_FILE" />
    </appender>
    <appender name="HYSTRIX_DETAIL_ROLLING_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${logPath}/resourceMonitor.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <FileNamePattern>${logPath}/resourceMonitor.log.%d{yyyy-MM-dd}.gz</FileNamePattern>
            <!--日志文件保留天数 -->
            <MaxHistory>7</MaxHistory>
            <!-- 日志总保存量大小 -->
            <!--<totalSizeCap>${logCapacity}</totalSizeCap>-->
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <!--日志输出编码格式化-->
            <!--<encoder>-->
            <charset>UTF-8</charset>
            <!-- 立即IO输出，关闭走流缓存8K -->
            <immediateFlush>false</immediateFlush>
            <pattern>%d{yyyy-MM-dd HH:mm:ss} - %m%n</pattern>
        </encoder>
        <!-- 追加方式记录日志 -->
        <append>true</append>
    </appender>
    <appender name="HYSTRIX_DETAIL_ROLLING_FILE_ASYNC" class="ch.qos.logback.classic.AsyncAppender" queueSize="1000000" discardingThreshold="0" includeCallerData="false">
        <appender-ref ref="HYSTRIX_DETAIL_ROLLING_FILE" />
    </appender>
    <root level="${logLevel}">
        <appender-ref ref="console"/>
        <appender-ref ref="SERVER-API_ASYNC"/>
        <appender-ref ref="errorLog_ASYNC"/>
    </root>

    <logger name="com.letv.mas.caller.iptv.tvproxy.user.interceptor.RewriteFilter" level="INFO" additivity="false">
        <appender-ref ref="CALLER_ROLLING_FILE_ASYNC" />
    </logger>
    <logger name="cacheDataLog" level="INFO" additivity="false">
        <appender-ref ref="CACHE_ROLLING_FILE_ASYNC" />
    </logger>
    <logger name="com.letv.mas.caller.iptv.tvproxy.user.util.HttpClientUtil" level="INFO" additivity="false">
        <appender-ref ref="HTTP_ROLLING_FILE_ASYNC" />
    </logger>
    <logger name="serviceStatusLoger" level="INFO" additivity="false">
        <appender-ref ref="SERVICE_STATUS_ROLLING_FILE_ASYNC" />
    </logger>
    <logger name="apiSwitchMonitorLog" level="INFO" additivity="false">
        <appender-ref ref="API_SWITCH_MONITOR_STATUS_ROLLING_FILE_ASYNC" />
    </logger>
    <logger name="hystrixMonitorLog" level="INFO" additivity="false">
        <appender-ref ref="HYSTRIX_ROLLING_FILE_ASYNC" />
    </logger>
    <logger name="resourceMonitorLog" level="INFO" additivity="false">
        <appender-ref ref="HYSTRIX_DETAIL_ROLLING_FILE_ASYNC" />
    </logger>

</Configuration>